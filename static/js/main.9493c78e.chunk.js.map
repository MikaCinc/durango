{"version":3,"sources":["data/kafici.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["kafici","ID","Title","Logo","BrojMesta","BrojSlobodnihMesta","Details","Opis","Slike","RadnoVreme","Lokacija","Meni","props","data","src","onClick","setSelected","App","useState","selected","search","setSearch","useEffect","query","queryString","parse","window","location","view","parseInt","history","pushState","pathname","stringify","List","arr","filtered","filter","trim","toLowerCase","indexOf","_","orderBy","filterBySearch","map","Kafic","key","className","style","color","id","placeholder","value","onChange","e","target","find","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9493c78e.chunk.js","sourcesContent":["const kafici = [\r\n    {\r\n        ID: 1,\r\n        Title: 'Vinyl',\r\n        Logo: 'vinyl.png',\r\n        BrojMesta: 32,\r\n        BrojSlobodnihMesta: 22,\r\n        Details: {\r\n            Opis: 'Hej haj helou',\r\n            Slike: ['', '', ''],\r\n            RadnoVreme: '07:00 - 23:30',\r\n            Lokacija: '',\r\n            Meni: ''\r\n        },\r\n    },\r\n    {\r\n        ID: 2,\r\n        Title: 'Square',\r\n        Logo: 'Square.jpg',\r\n        BrojMesta: 68,\r\n        BrojSlobodnihMesta: 31,\r\n        Details: {\r\n            Opis: 'Mi smo square',\r\n            Slike: ['', '', ''],\r\n            RadnoVreme: '09:00 - 00:10',\r\n            Lokacija: '',\r\n            Meni: ''\r\n        },\r\n    },\r\n    {\r\n        ID: 3,\r\n        Title: 'Dnevna soba',\r\n        Logo: 'dnevnaSoba.jpg',\r\n        BrojMesta: 42,\r\n        BrojSlobodnihMesta: 0,\r\n        Details: {\r\n            Opis: 'Va≈°a dnevna soba!',\r\n            Slike: ['', '', ''],\r\n            RadnoVreme: '09:00 - 00:10',\r\n            Lokacija: '',\r\n            Meni: ''\r\n        },\r\n    },\r\n]\r\n\r\nexport default kafici;\r\n","/* React */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n/* Data */\r\n// import data from './data/kafici';\r\n/* Libraries */\r\nimport _ from 'lodash';\r\nimport queryString from 'query-string';\r\n\r\nfunction Details(props) {\r\n\r\n    return (\r\n        <div>\r\n            <h1>{props.data.Title}</h1>\r\n            <img src={'./slike/' + props.data.Logo} />\r\n            <p>Slobodnih mesta: {props.data.BrojSlobodnihMesta} / {props.data.BrojMesta}</p>\r\n            <p>O mestu: {props.data.Details.Opis}</p>\r\n            <button>Rezervisi</button>\r\n            <button onClick={() => {\r\n                props.setSelected(null)\r\n            }}>Nazad</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;\r\n","/* React */\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\n/* Data */\nimport data from './data/kafici';\n/* Libraries */\nimport _ from 'lodash';\nimport queryString from 'query-string';\n/* Pages */\nimport Details from './Details';\n\nfunction App(props) {\n  const [selected, setSelected] = useState(null);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    let query = queryString.parse(window.location.search);\n\n    if (query.view) {\n      setSelected(parseInt(query.view, 10));\n    };\n  }, [])\n\n  useEffect(() => {\n    if(selected) {\n      window.history.pushState({}, '', window.location.pathname + \"?\" + queryString.stringify({ 'view': selected }));\n    }else {\n      window.history.pushState({}, '', window.location.pathname);\n    }\n  }, [selected])\n\n\n  const filterBySearch = (arr = data) => {\n    let filtered = arr.filter(({ Title }) => {\n      return Title.trim().toLowerCase().indexOf(search) > -1;\n    });\n\n    return _.orderBy(filtered, 'BrojSlobodnihMesta', 'desc');\n  }\n\n  const Search = () => {\n    return (\n      <div className=\"search\">\n        <i className=\"material-icons\" id=\"searchIcon\">\n          search\n        </i>\n        <input\n          className=\"searchInput\"\n          placeholder=\"Search...\"\n          value={search}\n          onChange={(e) => {\n            setSearch(e.target.value)\n          }} />\n      </div>\n    )\n  }\n\n  const List = () => {\n    return (\n      filterBySearch().map((Kafic) => {\n        return <div\n          key={Kafic.ID}\n          className=\"singleLine\"\n          onClick={() => {\n            setSelected(Kafic.ID)\n          }}\n        >\n          <img className=\"listLogo\" src={'./slike/' + Kafic.Logo} />\n          <h1 className=\"lineTitle\">{Kafic.Title}</h1>\n          <div className=\"lineCounter\">\n            <p className=\"lineFreeSeats\">{Kafic.BrojSlobodnihMesta} / {Kafic.BrojMesta}</p>\n            <i\n              className=\"material-icons peopleIcon\"\n              style={{\n                color: Kafic.BrojSlobodnihMesta > 0 ? '#3261D5' : '#ff0000',\n              }}\n            >\n              people\n            </i>\n          </div>\n        </div>\n      })\n    )\n  }\n\n  const ListAndSearch = () => {\n    return (\n      <Fragment>\n        {\n          Search()\n        }\n        {\n          List()\n        }\n      </Fragment>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"list\">\n        {\n          !selected && ListAndSearch()\n        }\n      </div>\n      <div className='details'>\n        {\n          selected && <Details data={_.find(data, { 'ID': selected })} setSelected={setSelected} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}